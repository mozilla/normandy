urls = { }

function request()
  return wrk.format("GET", urls[math.random(#urls)])
end

function init(args)
  -- Count and URLs. These are based on production traffic.
  local traffic = {
    {17238, "/api/v1/classify_client/"},
    {17197, "/api/v1/recipe/?enabled=true"},
    {8387, "/en-US/repair"},
    {2272, "/ru/repair"},
    {1295, "/de/repair"},
    {733, "/fr/repair"},
    {611, "/ja/repair"},
    {531, "/zh-CN/repair"},
    {490, "/pl/repair"},
    {373, "/en-US/repair/"},
    {320, "/__lbheartbeat__"},
    {305, "/en-GB/repair"},
    {295, "/es-ES/repair"},
    {256, "/tr/repair"},
    {245, "/api/v1/action/show-heartbeat/"},
    {189, "/id/repair"},
    {157, "/ru/repair/"},
    {149, "/zh-TW/repair"},
    {148, "/cs/repair"},
    {143, "/hu/repair"},
    {135, "/it/repair"},
    {129, "/es-MX/repair"},
    {123, "/fi/repair"},
    {102, "/de/repair/"},
    {93, "/el/repair"},
    {87, "/pt-BR/repair"},
    {77, "/th/repair"},
    {70, "/nl/repair"},
    {62, "/vi/repair"},
    {61, "/ja/repair/"},
    {59, "/bg/repair"},
    {54, "/ro/repair"},
    {47, "/sk/repair"},
    {46, "/ko/repair"},
    {41, "/lt/repair"},
    {36, "/es-AR/repair"},
    {36, "/ar/repair"},
    {35, "/uk/repair"},
    {34, "/sv-SE/repair"},
    {29, "/fr/repair/"},
    {28, "/ja-JP-mac/repair"},
    {27, "/sl/repair"},
    {23, "/pl/repair/"},
    {22, "/zh-CN/repair/"},
    {20, "/da/repair"},
    {19, "/hr/repair"},
    {15, "/en-ZA/repair"},
    {15, "/en-GB/repair/"},
    {15, "/tr/repair/"},
    {12, "/lv/repair"},
    {12, "/et/repair"},
    {12, "/es-CL/repair"},
    {11, "/nb-NO/repair"},
    {11, "/cs/repair/"},
    {10, "/api/v1/recipe/signed/"},
    {9, "/sr/repair"},
    {9, "/es-ES/repair/"},
    {8, "/fi/repair/"},
    {7, "/https://self-repair.mozilla.org/"},
    {7, "/it/repair/"},
    {7, "/pt-PT/repair"},
    {7, "/id/repair/"},
    {6, "/hu/repair/"},
    {6, "/fa/repair"},
    {5, "/zh-TW/repair/"},
    {5, "/el/repair/"},
    {4, "/sk/repair/"},
    {4, "/__heartbeat__"},
    {4, "/he/repair"},
    {3, "/th/repair/"},
    {3, "/es-MX/repair/"},
    {3, "/lt/repair/"},
    {3, "/ca/repair"},
    {3, "/nl/repair/"},
    {2, "/bg/repair/"},
    {2, "/ro/repair/"},
    {2, "/sv-SE/repair/"},
    {2, "/vi/repair/"},
    {2, "/en-US/undefined"},
    {2, "/sl/repair/"},
    {1, "/da/repair/"},
    {1, "/ko/repair/"},
    {1, "/pt-BR/repair/"},
    {1, "/en-ZA/repair/"},
    {1, "/ja-JP-mac/repair/"},
    {1, "/"},
    {1, "/hr/repair/"},
    {1, "/et/repair/"},
    {1, "/lv/repair/"},
  }

  -- for each (url, count) pair in in the traffic pattern, append `url` the list
  -- of urls `count` times.
  urls = { }
  for index, pair in ipairs(traffic) do
    for i = 1,t[2] do
      urls[#urls+1] = t[1]
    end
  end
end
